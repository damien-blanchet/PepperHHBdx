import jade
import numpy as np
import json

import sys
import getopt

def main():
        buffer_window = 230
        fftresult = parse_RGB(buffer_window)
        print("La frequence cardiaque est : ", frequencyExtract(fftresult, 15))

def parse_RGB(buffer_window):
        rgb = [78.91818181818182,82.68333333333334,82.10357142857143,82.81428571428572,80.61333333333333,81.34333333333333,79.35,80.68666666666667,80.68666666666667,81.521875,77.52631578947368,77.4407894736842,78.57565789473684,77.66776315789474,79.83881578947368,79.39473684210526,80.34868421052632,80.1217105263158,77.58881578947368,77.09539473684211,77.7467105263158,77.56907894736842,77.28947368421052,77.89144736842105,78.0032894736842,78.92763157894737,78.92763157894737,78.875,79.60197368421052,79.66118421052632,78.99342105263158,79.49013157894737,80.10197368421052,79.98355263157895,80.70394736842105,79.8092105263158,79.29934210526316,79.9375,78.5,78.01644736842105,78.60526315789474,78.728125,78.565625,78.925,79.084375,78.815625,79.175,78.584375,80.11875,81.73125,82.25,83.725,84.196875,84.928125,84.959375,83.790625,84.259375,84.453125,83.625,83.384375,83.353125,82.5625,83.26176470588236,82.90588235294118,82.90588235294118,83.37352941176471,82.79117647058824,83.32352941176471,82.95,83.06764705882352,83.41764705882353,83.35882352941177,83.31176470588235,83.6029411764706,83.22647058823529,83.41764705882353,83.29411764705883,84.03235294117647,83.46470588235294,83.24117647058823,83.24117647058823,83.84705882352941,83.50294117647059,83.65294117647059,83.52941176470588,83.52058823529411,83.8,83.8,83.31470588235294,83.62941176470588,84.24117647058823,83.93125,83.9375,83.9375,83.8625,83.96875,84.490625,83.975,83.721875,84.39375,84.39375,84.459375,84.715625,84.0875,84.4875,84.478125,83.653125,83.653125,84.434375,84.421875,83.81875,84.25,84.396875,84.075,84.275,84.384375,84.421875,84.33125,84.33125,84.10882352941177,84.63823529411765,84.21176470588236,84.61176470588235,84.35588235294118,83.85,84.13823529411765,83.46176470588236,83.32941176470588,83.97647058823529,83.90882352941176,83.56470588235294,84.19705882352942,84.6,83.89117647058823,84.02058823529411,83.80294117647058,84.33823529411765,84.33823529411765,84.65294117647059,84.23823529411764,84.14411764705882,84.03235294117647,83.75882352941177,84.04705882352941,84.80294117647058,84.34117647058824,85.1470588235294,85.44117647058823,85.44117647058823,84.66470588235295,84.84411764705882,84.81764705882352,84.85882352941177,84.85882352941177,84.87352941176471,84.9235294117647,85.20882352941176,84.50588235294117,84.7764705882353,84.97058823529412,84.65588235294118,84.71470588235294,84.95,85.15588235294118,84.89411764705882,85.06764705882352,84.69411764705882,84.59705882352941,84.90882352941176,84.99705882352941,85.13235294117646,84.82058823529412,85.34411764705882,84.44117647058823,84.71470588235294,84.71470588235294,85.11176470588235,84.88235294117646,84.98529411764706,84.54411764705883,84.54411764705883,84.78235294117647,85.22941176470589,84.85588235294118,84.46176470588236,85.2,84.79117647058824,84.79117647058824,84.65588235294118,84.83235294117647,84.97941176470589,84.73235294117647,84.89411764705882,84.89411764705882,84.40294117647059,85.00882352941177,84.94117647058823,84.09705882352941,84.50588235294117,84.71764705882353,84.62941176470588,84.88529411764706,84.75,85.07058823529412,85.10588235294118,84.49705882352941,84.62352941176471,84.83823529411765,84.83823529411765,84.57352941176471,84.7,84.51176470588236,84.74117647058823,83.76470588235294,83.76470588235294,84.60882352941177,84.65882352941176,84.58235294117647,84.85588235294118,84.86176470588235,84.88529411764706,84.38529411764706,84.44705882352942,84.68235294117648,84.68235294117648,84.84117647058824,84.50882352941177,85.03235294117647,85.03235294117647,85.03235294117647],[51.14090909090909,53.78333333333333,53.417857142857144,54.48571428571429,51.9,53.123333333333335,52.10666666666667,52.983333333333334,52.983333333333334,53.496875,50.76973684210526,52.0296052631579,51.66447368421053,51.88815789473684,52.66447368421053,52.64802631578947,52.16447368421053,52.18421052631579,50.921052631578945,51.1578947368421,51.266447368421055,51.05592105263158,51.01315789473684,51.13486842105263,51.30263157894737,50.98684210526316,50.98684210526316,51.38157894736842,51.33223684210526,51.536184210526315,51.53947368421053,50.875,51.7203947368421,51.973684210526315,51.89473684210526,51.98684210526316,51.5625,51.50328947368421,50.516447368421055,50.75986842105263,50.5296052631579,50.709375,50.934375,51.1875,51.184375,51.134375,50.984375,50.878125,51.578125,52.15,52.453125,52.696875,53.071875,52.671875,52.6625,52.7,52.19375,51.8375,51.953125,51.6625,51.7375,51.74375,51.42058823529412,51.15,51.15,51.37647058823529,51.43529411764706,51.4,51.45882352941177,51.423529411764704,51.73235294117647,51.39705882352941,51.47352941176471,51.06470588235294,51.35294117647059,51.167647058823526,51.28529411764706,51.12352941176471,51.3235294117647,51.58529411764706,51.58529411764706,51.391176470588235,51.370588235294115,51.470588235294116,51.01176470588236,51.12647058823529,50.88235294117647,50.88235294117647,51.22352941176471,51.311764705882354,51.31764705882353,51.7875,51.715625,51.715625,51.73125,51.36875,51.11875,51.484375,51.628125,51.409375,51.409375,51.521875,51.475,51.725,51.553125,51.465625,51.76875,51.76875,51.565625,51.553125,52.096875,51.984375,52.1375,51.996875,52.025,51.853125,51.78125,51.865625,51.865625,51.82058823529412,51.44117647058823,51.79705882352941,51.88235294117647,51.997058823529414,52.15,52.01764705882353,52.120588235294115,51.997058823529414,51.61176470588235,51.805882352941175,51.576470588235296,51.529411764705884,51.56764705882353,52.076470588235296,51.63235294117647,52.0735294117647,51.65882352941176,51.65882352941176,51.36470588235294,51.64411764705882,51.65588235294118,51.46470588235294,51.555882352941175,51.620588235294115,51.779411764705884,51.89411764705882,52.07058823529412,52.15294117647059,52.15294117647059,52.23235294117647,51.9264705882353,51.92058823529412,51.64411764705882,51.64411764705882,51.76764705882353,52.15,52.15882352941176,52.20882352941177,52.49411764705882,52.25,52.27647058823529,51.938235294117646,51.91470588235294,51.95294117647059,51.955882352941174,51.87647058823529,52.108823529411765,51.92058823529412,52.11470588235294,52.13235294117647,52.076470588235296,52.31470588235294,51.997058823529414,52.082352941176474,51.86764705882353,51.86764705882353,52.082352941176474,51.8235294117647,52.22352941176471,52.029411764705884,52.029411764705884,52.332352941176474,52.19705882352941,52.26176470588236,52.194117647058825,52.05882352941177,52.141176470588235,52.141176470588235,52.22941176470588,52.43235294117647,52.28529411764706,52.17058823529412,52.411764705882355,52.411764705882355,52.47352941176471,51.93529411764706,51.96176470588235,52.03823529411765,52.167647058823526,52.19705882352941,52.14705882352941,51.81470588235294,51.917647058823526,52.076470588235296,52.14411764705882,52.11176470588235,52.28235294117647,52.12647058823529,51.95294117647059,51.90588235294118,51.917647058823526,52.01764705882353,51.92058823529412,52.338235294117645,52.338235294117645,52.17941176470588,52.10588235294118,52.03235294117647,52.252941176470586,51.970588235294116,51.838235294117645,51.794117647058826,51.90588235294118,51.997058823529414,51.89705882352941,51.78823529411765,52.17058823529412,51.77058823529412,51.71176470588235,51.71176470588235],[44.00909090909091,46.18333333333333,43.71785714285714,44.30714285714286,43.26,44.84,43.21333333333333,45.22,45.22,44.503125,43.48026315789474,44.4078947368421,44.5,43.38815789473684,43.89802631578947,45.14802631578947,45.0296052631579,44.286184210526315,44.0328947368421,44.02302631578947,42.75986842105263,43.5921052631579,43.463815789473685,43.67763157894737,43.4671052631579,43.75986842105263,43.75986842105263,44.39473684210526,44.7796052631579,44.17434210526316,43.53947368421053,44.588815789473685,44.7203947368421,45.05921052631579,44.82565789473684,45.35526315789474,44.0328947368421,43.125,42.4671052631579,41.4078947368421,40.0625,40.00625,40.271875,40.5375,40.41875,40.65,41.428125,42.003125,43.20625,44.4375,44.2375,44.059375,44.23125,43.753125,44.028125,44.159375,43.5,43.04375,43.178125,43.275,43.040625,43.1125,42.01764705882353,42.8235294117647,42.8235294117647,42.088235294117645,42.476470588235294,41.5,42.44705882352941,42.56470588235294,41.752941176470586,42.67941176470588,42.47941176470588,43.09117647058824,42.476470588235294,42.970588235294116,42.870588235294115,41.955882352941174,43.27058823529412,43.02647058823529,43.02647058823529,42.19117647058823,43.055882352941175,42.13235294117647,42.641176470588235,42.470588235294116,42.608823529411765,42.608823529411765,42.38235294117647,42.4264705882353,42.95294117647059,42.334375,43.009375,43.009375,42.840625,42.890625,42.825,42.6375,42.803125,42.853125,42.853125,42.853125,43.0375,42.621875,43.015625,42.90625,42.696875,42.696875,42.2375,42.76875,42.865625,42.75625,42.665625,43.665625,42.334375,42.74375,43.09375,42.76875,42.76875,42.68529411764706,43.55,42.90588235294118,42.89411764705882,43.52058823529412,43.19117647058823,42.86470588235294,42.88823529411765,42.56764705882353,43.38823529411765,42.72352941176471,43.188235294117646,42.991176470588236,43.18529411764706,42.32941176470588,43.11176470588235,42.86764705882353,43.5735294117647,43.5735294117647,43.476470588235294,42.89411764705882,42.83529411764706,42.81470588235294,42.78823529411765,43.002941176470586,42.81470588235294,42.90588235294118,42.87352941176471,42.923529411764704,42.923529411764704,43.917647058823526,43.241176470588236,42.720588235294116,42.81764705882353,42.81764705882353,43.17941176470588,43.35,42.90882352941176,43.76176470588236,42.98529411764706,42.93235294117647,43.15588235294118,43.976470588235294,43.09411764705882,42.92058823529412,43.34411764705882,43.2,43.21470588235294,43.51470588235294,42.88823529411765,43.46176470588235,43.22352941176471,42.970588235294116,43.5,44.082352941176474,43.18529411764706,43.18529411764706,43.20294117647059,42.77058823529412,42.43529411764706,43.258823529411764,43.258823529411764,42.69117647058823,42.72352941176471,43.09705882352941,43.36764705882353,43.17058823529412,42.9264705882353,42.9264705882353,42.68235294117647,43.417647058823526,42.78235294117647,43.40588235294118,43.379411764705885,43.379411764705885,42.79117647058823,43.194117647058825,43.25588235294118,43.311764705882354,42.826470588235296,43.11764705882353,43.09705882352941,44.04117647058823,43.76764705882353,43.258823529411764,43.752941176470586,44.338235294117645,43.38235294117647,42.417647058823526,42.53235294117647,43.26176470588236,42.758823529411764,42.55294117647059,42.76470588235294,43.19117647058823,43.19117647058823,41.94705882352941,42.65882352941176,43.65588235294118,43.07058823529412,43.19117647058823,42.991176470588236,43.54705882352941,42.391176470588235,42.75588235294118,42.76176470588236,42.86764705882353,42.40588235294118,42.544117647058826,43.332352941176474,43.332352941176474]
        X = np.ndarray(shape = (3, buffer_window), buffer= np.array(rgb))
        X = normalize_matrix(X)
        ICA = jade.main(X)
        signalFFT = parse_ICA_results(ICA)
        return signalFFT


        

def parse_ICA_results(ICA):

        red = np.squeeze(np.asarray(ICA[:, 0])).tolist()
        green = np.squeeze(np.asarray(ICA[:, 1])).tolist()
        blue = np.squeeze(np.asarray(ICA[:, 2])).tolist()
        
        red = (np.hamming(len(red)) * red)
        green = (np.hamming(len(green)) * green)
        blue = (np.hamming(len(blue)) * blue)

        red = np.absolute(np.square(np.fft.irfft(red))).astype(float).tolist()
        green = np.absolute(np.square(np.fft.irfft(green))).astype(float).tolist()
        blue = np.absolute(np.square(np.fft.irfft(blue))).astype(float).tolist()

        power_ratio = [0, 0, 0]
        power_ratio[0] = np.sum(red)/np.amax(red)
        power_ratio[1] = np.sum(green)/np.amax(green)
        power_ratio[2] = np.sum(blue)/np.amax(blue)

        if np.argmax(power_ratio) == 0:
                signals = red
        elif np.argmax(power_ratio) == 1:
                signals = green
        else:
                signals = blue

        return signals

def normalize_matrix(matrix):

        for array in matrix:
                average_of_array = np.mean(array)
                std_dev = np.std(array)

                for i in range(len(array)):
                        array[i] = ((array[i] - average_of_array)/std_dev)
        return matrix

def normalize_array(array):

        average_of_array = np.mean(array)
        std_dev = np.std(array)

        for i in range(len(array)):
                array[i] = ((array[i] - average_of_array)/std_dev)
        return array

def frequencyExtract(fftArray, framerate):
        
        p2 = []
        freqs = []

        lenFftArray = len(fftArray)
        reverseFrame = 1.0/framerate

        frameRate = 1.0/(lenFftArray * reverseFrame)
        medium = ((lenFftArray - 1)/2 + 1) >> 0

        for i in range(medium):
            freqs.append(i * frameRate)

        for i in xrange(-(lenFftArray/2) >> 0, 0):
            p2.append(i * frameRate)

        freqs.append(p2)

        return filterFreq(fftArray, freqs, framerate)

def filterFreq(fftArray, freqs, framerate) :
    
    normalizedFreqs = []
    filteredFreqBin = []

    freqObj = zip(freqs, fftArray)

    for i in range(len(freqObj)) :
        freq = freqObj[i][0]
        if ((freq > 0.80) and (freq < 3)) :
            normalizedFreqs.append(abs(freqObj[i][1])**2)
            filteredFreqBin.append((freq)/1)
    
    idx = np.argmax(np.asarray(normalizedFreqs))
    freq_in_hertz = filteredFreqBin[idx]
    
    return freq_in_hertz * 60


if __name__ == "__main__":
    sys.exit(main())
